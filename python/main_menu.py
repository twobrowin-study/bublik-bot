import telebot
from bot_config import db, collection, bot
from telebot import types
import transactions
import registration
import re
@bot.message_handler(commands=['mm'])
def main_menu_func(message):
    if not collection.find_one({'chat_id': message.chat.id, 'confirmed': True}):
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!')
        return
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    organizations_button = types.KeyboardButton('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏')
    about_me_button = types.KeyboardButton('–û —Å–µ–±–µ')

    user_doc = collection.find_one({'chat_id': message.chat.id})

    try:
        org_manage_id = user_doc['org_manage']
    except KeyError:
        org_manage_id = 'NULL'

    if collection.find_one({'chat_id': message.chat.id, 'admin': 1}):
        about_me_button = types.KeyboardButton('–ö–æ–º–∞–Ω–¥—ã')



    if org_manage_id != 'NULL':
        org_manage_button = types.KeyboardButton('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
        markup.add(organizations_button,org_manage_button, about_me_button)
    else:
        markup.add(organizations_button, about_me_button)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)

# ------------–ü–ï–†–ï–í–û–î–´ –ß–ê–°–¢–ù–´–ú –ö–õ–ò–ï–ù–¢–ê–ú-------------------------------#
@bot.message_handler(func=lambda message: message.text == '–õ—é–¥–∏')
def start(message):
    # –≤—ã–≤–æ–¥–∏–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not collection.find_one({'chat_id': message.chat.id, 'confirmed': True}):
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!')
        return
    groups = collection.distinct("group")
    markup = telebot.types.InlineKeyboardMarkup()
    for group in groups:
        markup.add(telebot.types.InlineKeyboardButton(text=group, callback_data=f"group:{group}"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.split(":")[0] == "group") # –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
def handle_group_selection(call):
    # –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ callback_data
    group = call.data.split(":")[1]
    # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö admin != 1
    users = collection.find({"group": group, "admin": {"$ne": 1}, "chat_id": {"$ne": call.message.chat.id}})
    # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    markup = telebot.types.InlineKeyboardMarkup()
    for user in users:
        markup.add(telebot.types.InlineKeyboardButton(text=user["name"], callback_data=f"user:{user['chat_id']}"))
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {group} –æ—Ç—Ä—è–¥.\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.split(":")[0] == "user") # –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def handle_user_selection(call):
    # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
    user_id = call.data.split(":")[1]
    # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = collection.find_one({"chat_id": int(user_id)})
    print(user['name'])
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if user is not None:
        keyboard = types.InlineKeyboardMarkup()
        callback_button = types.InlineKeyboardButton(text="‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"transaction:{call.message.chat.id}:{user_id}")
        print(f"transaction:{call.message.chat.id}:{user_id}")
        keyboard.add(callback_button)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f"–í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –∫–ª–∏–µ–Ω—Ç—É:\n–ò–º—è: {user['name']}\n–û—Ç—Ä—è–¥: {user['group']}\n", reply_markup=keyboard)
    else:
        bot.answer_callback_query(callback_query_id=call.id, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

# ------------–†–ê–ë–û–¢–ê –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ô-------------------------------#

@bot.message_handler(func=lambda message: message.text == '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏')
def organizations_handler(message):
    if not collection.find_one({'chat_id': message.chat.id, 'confirmed': True}):
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!')
        return
    org = db['organizations']
    if collection.find_one({'chat_id': message.chat.id, 'admin': 1}):
        if not org.find_one({'admin_chat_id': message.chat.id}):
            keyboard = types.InlineKeyboardMarkup()
            callback_button = types.InlineKeyboardButton(text="–ú—É—Ç–∏–ºüí™", callback_data=f"registration")
            keyboard.add(callback_button)
            bot.send_message(chat_id=message.chat.id, text=f"–ó–∞ –≤–∞–º–∏ü´µ –Ω–µ —á–∏—Å–ª–∏—Ç—Å—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –º—É—Ç–∏–º?ü§î\n", reply_markup=keyboard)
        else:
            organizations_doc = org.find_one({'admin_chat_id': message.chat.id})
            org_id = organizations_doc['id_organization']
            keyboard = types.InlineKeyboardMarkup()
            callback_button1 = types.InlineKeyboardButton(text="üèõ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º",
                                                         callback_data=f"start_orgorg:{org_id}")
            callback_button2 = types.InlineKeyboardButton(text="‚ò∫Ô∏è –ü–µ—Ä–µ–≤–æ–¥ —á–∞—Å—Ç–Ω—ã–º –ª–∏—Ü–∞–º",
                                                          callback_data=f"orgfiz:{org_id}")
            callback_button3 = types.InlineKeyboardButton(text="üóø –û–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
                                                          callback_data=f"orgabout:{org_id}")
            callback_button4 = types.InlineKeyboardButton(text="ü•≤ –ó–∞–ø—Ä–æ—Å –¥–µ–Ω–µ–≥ —É —á–∞—Å—Ç–Ω—ã—Ö –ª–∏—Ü",
                                                          callback_data=f"query_money:{org_id}")
            keyboard.add(callback_button1)
            keyboard.add(callback_button2)
            keyboard.add(callback_button4)
            keyboard.add(callback_button3)
            bot.send_message(message.chat.id, text=f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π",reply_markup=keyboard)
    else:
        groups = org.distinct("name")
        markup = telebot.types.InlineKeyboardMarkup()
        for group in groups:
            group_doc = org.find_one({'name': group})
            markup.add(telebot.types.InlineKeyboardButton(text=group, callback_data=f"fizorg:{group_doc['id_organization']}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é:", reply_markup=markup)

        return

@bot.message_handler(func=lambda message: message.text == '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
def organizations_handler(message):
    if not collection.find_one({'chat_id': message.chat.id, 'confirmed': True}):
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!')
        return

    user_doc = collection.find_one({'chat_id': message.chat.id})
    try:
        org_manage_id = user_doc['org_manage']
    except ValueError:
        org_manage_id = 'NULL'

    if org_manage_id == 'NULL':
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!\n/mm –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        return

    keyboard = types.InlineKeyboardMarkup()
    callback_button1 = types.InlineKeyboardButton(text="üèõ –ü–µ—Ä–µ–≤–æ–¥ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º",
                                                 callback_data=f"start_orgorg:{org_manage_id}")
    callback_button2 = types.InlineKeyboardButton(text="‚ò∫Ô∏è –ü–µ—Ä–µ–≤–æ–¥ —á–∞—Å—Ç–Ω—ã–º –ª–∏—Ü–∞–º",
                                                  callback_data=f"orgfiz:{org_manage_id}")
    callback_button3 = types.InlineKeyboardButton(text="üóø –û–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
                                                  callback_data=f"orgabout:{org_manage_id}")
    callback_button4 = types.InlineKeyboardButton(text="ü•≤ –ó–∞–ø—Ä–æ—Å –¥–µ–Ω–µ–≥ —É —á–∞—Å—Ç–Ω—ã—Ö –ª–∏—Ü",
                                                  callback_data=f"query_money:{org_manage_id}")
    keyboard.add(callback_button1)
    keyboard.add(callback_button2)
    keyboard.add(callback_button4)
    keyboard.add(callback_button3)
    bot.send_message(message.chat.id, text=f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π",reply_markup=keyboard)
    return



@bot.callback_query_handler(func=lambda call: call.data.split(":")[0] == "orgabout")
def orgaa(call):
    org = db['organizations']
    org_doc = org.find_one({'id_organization':call.data.split(":")[1]})
    bot.send_message(call.message.chat.id, f"–í–∞—à–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è \"{org_doc['name']}\"\n–ë–∞–ª–∞–Ω—Å: {org_doc['balance']} –±—É–±.")

@bot.callback_query_handler(func=lambda call: call.data.split(":")[0] == "registration") # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
def org_reg_start(call):
    if collection.find_one({'chat_id': message.chat.id, 'admin': 0}):
        bot.send_message(message.chat.id, "–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ")
        return

    chat_id = call.message.chat.id
    sent = bot.send_message(chat_id,
                     '–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n\n–§–æ—Ä–º–∞—Ç: "–ù–∞–∑–≤–∞–Ω–∏–µ", "–£—Å—Ç–∞–≤–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª"')
    bot.register_next_step_handler(sent, org_reg)
# —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û —Å–µ–±–µ"

def org_reg(message):
    organizations = db['organizations']
    chat_id = message.chat.id
    org_id = f"org{find_highest_org_id() + 1}"
    try:
        name, balance = message.text.split(',')
        balance = int(balance)
        if balance >= 50000:
            bot.send_message(message.chat.id, '–ú–∞–∫—Å–∏–º—É–º 50000')
            return

        if len(name) > 24:
            print(len(name))
            bot.send_message(message.chat.id, '–ú–∞–∫—Å–∏–º—É–º 23 —Å–∏–º–≤–æ–ª–∞')
            return
    except ValueError:
        if message.text == "–ù–∞–∑–∞–¥":
            bot.send_message(message.chat.id, '–í–µ—Ä–Ω–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            main_menu_func(message)
            return
        print('ValueError',message.text)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        people_button = types.KeyboardButton('–ù–∞–∑–∞–¥')
        markup.add(people_button)
        sent = bot.send_message(chat_id, 'üåö –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', reply_markup=markup)
        bot.register_next_step_handler(message, org_reg)
        return

    organizations.insert_one({'id_organization': org_id,  'balance': balance, 'name': name.strip(),'admin_chat_id':chat_id})
    sent = bot.send_message(chat_id, '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞')
    bot.register_next_step_handler(sent, main_menu_func)

def find_highest_org_id():
    highest_num = 0
    organizations = db['organizations']
    for doc in organizations.find():
        org_id = doc.get("id_organization")
        if org_id.startswith("org") and org_id[3:].isdigit():
            num = int(org_id[3:])
            if num > highest_num:
                highest_num = num
    return highest_num

#------------------------------------------------------------------------------------------------------------------------#
@bot.message_handler(func=lambda message: message.text == '–û —Å–µ–±–µ')
def about_me_handler(message):
    if not collection.find_one({'chat_id': message.chat.id, 'confirmed': True}):
        bot.send_message(message.chat.id, f'–í–∞—à id {message.chat.id}')
        return
    user = collection.find_one({"chat_id": message.chat.id})
    try:
        org_manage_id = user['org_manage']
    except KeyError:
        org_manage_id = 'NULL'

    if org_manage_id == 'NULL':
        bot.send_message(message.chat.id, f"üß∏ –í–∞—à–µ –∏–º—è: {user['name']}\nüêí –í–∞—à –æ—Ç—Ä—è–¥: {user['group']}\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} –ë—É–±–ª–µ–π")
    else:
        org = db['organizations']
        org_doc = org.find_one({'id_organization': org_manage_id})
        bot.send_message(message.chat.id,
                         f"üß∏ –í–∞—à–µ –∏–º—è: {user['name']}\nüêí –í–∞—à –æ—Ç—Ä—è–¥: {user['group']}\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} –ë—É–±–ª–µ–π\n  –£–ø—Ä–∞–≤–ª—è–µ—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π: {org_doc['name']}")

@bot.message_handler(func=lambda message: message.text == '–ö–æ–º–∞–Ω–¥—ã')
def admin_commands(message):
    bot.send_message(message.chat.id, f'–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ –ø–æ –æ—Ç—Ä—è–¥—É\n'
                                      f'/group <–Ω–æ–º–µ—Ä –æ—Ç—Ä—è–¥–∞>\n\n'
                                      f'–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ –æ—Ç—Ä—è–¥–µ\n'
                                      f'/set_balance <–Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã> <—Å—É–º–º–∞>\n\n'
                                      f'–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ id\n'
                                      f'/set_id <id> <—Å—É–º–º–∞>\n\n'
                                      f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–µ—Ç–µ–π –∏–∑ —Ç–≤–æ–µ–≥–æ –æ—Ç—Ä—è–¥–∞. –û–¥–Ω–æ–≥–æ –∏–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n'
                                      f'/reg, <–ò–º—è –§–∞–º–∏–ª–∏—è>\n–∑–∞–ø—è—Ç—É—é –ø–æ—Å–ª–µ /reg –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ\n\n'
                                      f'–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –ò–º–µ–Ω–µ–º –∏ id(–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –±–æ—Ç–µ –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)\n'
                                      f'/compare <chat_id> <–ò–º—è> <–§–∞–º–∏–ª–∏—è>\n\n'
                                      f'–î–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π\n'
                                      f'/add_employee <id>\n\n'
                                      f'–£–¥–∞–ª–∏—Ç—å —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π\n'
                                      f'/delete_employee <id>\n\n'
                                      f'–ü–æ–ª—É—á–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ –æ—Ç—Ä—è–¥–∞–º\n'
                                      f'/fiz_analiz <–Ω–æ–º–µ—Ä –æ—Ç—Ä—è–¥–∞>\n\n'
                                      f'–ü–æ–ª—É—á–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º\n'
                                      f'/org_analiz\n\n')
    collection = db['users']
    user = collection.find_one({"chat_id": message.chat.id})
    bot.send_message(message.chat.id,
                         f"–í–∞—à–µ –∏–º—è: {user['name']}\n–í–∞—à –æ—Ç—Ä—è–¥: {user['group']}\n –í–∞—à id: {message.chat.id}")
@bot.message_handler(commands=['group'])
def group_handler(message):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if collection.find_one({'chat_id': message.chat.id, 'admin': 0}):
        bot.send_message(message.chat.id, "–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ")
        return

    try:
        group_num = message.text.split()[1]
    except IndexError:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ")
        bot.send_message(message.chat.id, "/group <–Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã>")# –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø—ã
        return
    users = collection.find({'group': group_num})
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–º–µ–Ω–∞–º–∏ –∏ –±–∞–ª–∞–Ω—Å–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    text = f"{group_num}-–π –æ—Ç—Ä—è–¥:\n"
    for user in users:
        try:
            org_manage_id = user['org_manage']
        except KeyError:
            org_manage_id = 'NULL'
        if org_manage_id == 'NULL':
            text += f"{user['name']} id: {user['chat_id']} balance: {user['balance']}\n\n"
        else:
            org = db['organizations']
            org_doc = org.find_one({'id_organization': org_manage_id})
            text += f"{user['name']} id: {user['chat_id']} balance: {user['balance']}\n–£–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π: {org_doc['name']}\n\n"

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['set_balance'])
def set_balance(message):
    if collection.find_one({'chat_id': message.chat.id, 'admin': 0}):
        bot.send_message(message.chat.id, "–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ")
        return

    try:
        group_number, balance = message.text.split()[1:]
        balance = int(balance)
    except ValueError:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!")
        bot.send_message(message.chat.id, "/set_balance <–Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã> <—Å—É–º–º–∞>")
        return

    collection.update_many({"group": group_number}, {"$set": {"balance": balance}})  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≥—Ä—É–ø–ø—ã

    bot.reply_to(message, f"–ë–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã {group_number} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {balance}")

@bot.message_handler(commands=['set_id'])
def set_balance_by_id(message):
    if collection.find_one({'chat_id': message.chat.id, 'admin': 0}):
        bot.send_message(message.chat.id, "–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ")
        return

        # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        chat_id, new_balance = message.text.split()[1:]
        chat_id = int(chat_id)
        new_balance = int(new_balance)
    except ValueError:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!")
        bot.send_message(message.chat.id, "/set_id <id —Ä–µ–±–µ–Ω–∫–∞> <—Å—É–º–º–∞>")
        return
    # –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    result = collection.update_one({'chat_id': chat_id}, {'$set': {'balance': new_balance}})
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –æ–±–Ω–æ–≤–ª–µ–Ω –µ–≥–æ –±–∞–ª–∞–Ω—Å
    doc = collection.find_one({'chat_id': chat_id})
    if result.matched_count > 0:
        bot.send_message(message.chat.id, f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {doc['name']} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {new_balance} –ë—É–±–ª–µ–π")
        bot.send_message(doc['chat_id'], f" üí∏ –í–∞—à –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {new_balance} –ë—É–±–ª–µ–π")
    else:
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

@bot.message_handler(commands=['reg,'])
def reg_handler(message):
    if collection.find_one({'chat_id': message.chat.id, 'admin': 0}):
        bot.send_message(message.chat.id, "–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ")
        return

        # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        names = message.text.split(',')[1:]
        if not names:
            bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–º—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /reg")
            return
    except IndexError:
        bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–º—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /reg")
        return
    # –ø–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π chat_id —Å—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å chat_id < 10000
    doc = collection.find_one({'chat_id': {'$lt': 10000}}, {'chat_id': 1}, sort=[('chat_id', -1)])
    if doc:
        max_chat_id = doc['chat_id']
    else:
        max_chat_id = 0

    # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    admin_doc = collection.find_one({'chat_id': message.chat.id})
    admin_group = admin_doc['group']
    for name in names:
        if name != "":
            user = {
                'chat_id': max_chat_id + 1,
                'name': name,
                'group': admin_group,
                'admin': 0,
                'confirmed': True,
                'balance': 0
            }
            db.users.insert_one(user)
            max_chat_id += 1
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ {', '.join(names)} –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")


@bot.message_handler(commands=['compare'])
def compare_handler(message):
    if collection.find_one({'chat_id': message.chat.id, 'admin': 0}):
        bot.send_message(message.chat.id, "–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ")
        return

        # –ø–æ–ª—É—á–∞–µ–º –∏–º—è –∏ chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.text.count(' ') < 3:
        print(message.text.count(' '))
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /compare <chat_id> <–ò–º—è> <–§–∞–º–∏–ª–∏—è>")
        return

    try:
        # –ø–æ–ª—É—á–∞–µ–º –∏–º—è –∏ chat_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        chat_id = message.text.split(' ')[1]
        name = message.text.split(' ')[2] + ' ' + message.text.split(' ')[3]
        print(name)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /compare <chat_id> <–ò–º—è> <–§–∞–º–∏–ª–∏—è>")
        return

    # –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ –∏–º–µ–Ω–∏
    user = collection.find_one({'name': name})
    if user is None:
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º {name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –æ–±–Ω–æ–≤–ª—è–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = collection.update_one({'_id': user['_id']}, {'$set': {'chat_id': int(chat_id)}})

    if result.modified_count == 1:
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–≤–æ–µ–Ω chat_id {chat_id}")
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ chat_id")

@bot.message_handler(commands=['add_employee'])
def empolyee_adder(message):
    if collection.find_one({'chat_id': message.chat.id, 'admin': 0}):
        bot.send_message(message.chat.id, "–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ")
        return

    employee = int(message.text.split()[1])
    org = db['organizations']
    try:
        org_doc = org.find_one({'admin_chat_id': message.chat.id})
    except ValueError:
        bot.send_message(message.chat.id, "–£ –í–∞—Å –Ω–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")
        return
    org_id = org_doc['id_organization']
    users = db['users']
    user = users.find_one({'chat_id': employee})
    if user is None:
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {employee} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    users.update_one({'chat_id': employee }, {'$set': {'org_manage': org_id}})
    bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–≤–∞—Ç–µ–ª—å {user['name']} –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π")
    return

@bot.message_handler(commands=['delete_employee'])
def empolyee_deleter(message):
    if collection.find_one({'chat_id': message.chat.id, 'admin': 0}):
        bot.send_message(message.chat.id, "–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ")
        return
    employee = int(message.text.split()[1])

    users = db['users']
    user = users.find_one({'chat_id': employee})
    if user is None:
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {employee} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    users.update_one({'chat_id': employee}, {'$set': {'org_manage': 'NULL'}})
    bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–≤–∞—Ç–µ–ª—å {user['name']} –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π")
    return


@bot.message_handler(commands=['fiz_analiz'])
def handle_fiz_analiz(message):
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
    if collection.find_one({'chat_id': message.chat.id, 'admin': 0}):
        bot.send_message(message.chat.id, "–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ")
        return
    if len(message.text.split()) < 2:
        bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /fiz_analiz")
        return

    group_number = message.text.split()[1]
    users_collection = db['users']
    transactions_collection = db['transactions']
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ
    users = users_collection.find({'group': group_number})

    for user in users:
        user_id = user['chat_id']
        user_name = user['name']

        # –°—á–∏—Ç–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        received_amount = transactions_collection.aggregate([
            {'$match': {'recipient': user_id}},
            {'$group': {'_id': None, 'total_amount': {'$sum': '$amount'}}}
        ])

        sent_amount = transactions_collection.aggregate([
            {'$match': {'sender': user_id}},
            {'$group': {'_id': None, 'total_amount': {'$sum': '$amount'}}}
        ])

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—É–º–º
        received_amount = next(received_amount, {'total_amount': 0})['total_amount']
        sent_amount = next(sent_amount, {'total_amount': 0})['total_amount']

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        result_message = f"–ò–º—è: {user_name}\n–ü–æ–ª—É—á–µ–Ω–æ: {received_amount}\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_amount}"
        bot.send_message(message.chat.id, result_message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /org_analiz
@bot.message_handler(commands=['org_analiz'])
def handle_org_analiz(message):
    if collection.find_one({'chat_id': message.chat.id, 'admin': 0}):
        bot.send_message(message.chat.id, "–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ")
        return
    transactions_collection = db['transactions']
    organizations_collection = db['organizations']
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ transactions
    senders = transactions_collection.distinct('sender')
    recipients = transactions_collection.distinct('recipient')

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∫–æ–º–ø–∞–Ω–∏–π
    organizations_ids = list(set(senders + recipients))

    for org_id in organizations_ids:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ organizations
        organization = organizations_collection.find_one({'id_organization': org_id})

        if organization:
            org_name = organization['name']

            # –°—á–∏—Ç–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—É–º–º—ã –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
            received_amount = transactions_collection.aggregate([
                {'$match': {'recipient': org_id}},
                {'$group': {'_id': None, 'total_amount': {'$sum': '$amount'}}}
            ])

            sent_amount = transactions_collection.aggregate([
                {'$match': {'sender': org_id}},
                {'$group': {'_id': None, 'total_amount': {'$sum': '$amount'}}}
            ])

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å—É–º–º
            received_amount = next(received_amount, {'total_amount': 0})['total_amount']
            sent_amount = next(sent_amount, {'total_amount': 0})['total_amount']

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–∞–Ω–∏–∏
            result_message = f"–ö–æ–º–ø–∞–Ω–∏—è: {org_name}\n–ü–æ–ª—É—á–µ–Ω–æ: {received_amount}\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_amount}"
            bot.send_message(message.chat.id, result_message)





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear_transactions
@bot.message_handler(commands=['clear_transactions_0923842233'])
def handle_clear_transactions(message):
    if collection.find_one({'chat_id': message.chat.id, 'admin': 0}):
        bot.send_message(message.chat.id, "–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ")
        return
    transactions_collection = db['transactions']
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ transactions
    result = transactions_collection.delete_many({})

    # –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ
    delete_count = result.deleted_count
    response_message = f"–£–¥–∞–ª–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {delete_count}"
    bot.send_message(message.chat.id, response_message)


@bot.message_handler(commands=['delete_users_91292398398130'])
def handle_delete_users(message):
    if collection.find_one({'chat_id': message.chat.id, 'admin': 0}):
        bot.send_message(message.chat.id, "–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ")
        return
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users
    result = users_collection.delete_many({})

    # –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
    delete_count = result.deleted_count
    response_message = f"–£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {delete_count}"
    bot.send_message(message.chat.id, response_message)

if __name__ == "__main__":
    bot.polling(non_stop=True)