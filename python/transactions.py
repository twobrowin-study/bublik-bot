import telebot
# import telegram
from telebot import types
from datetime import datetime
from bot_config import client, db, collection, bot
from main_menu import main_menu_func
users = db['users']
transactions = db['transactions']

#-------------------------------–¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ú–ï–ñ–î–£ –ö–õ–ò–ï–ù–¢–ê–ú–ò--------------------------------------#
@bot.callback_query_handler(func=lambda call: call.data.startswith('transaction:'))
def process_transaction_callback(call):
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    print(call.data)
    amount_message = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:')
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ 'waiting_for_amount'
    bot.register_next_step_handler(amount_message, process_amount_callback, call.data)
def process_amount_callback(message, callback_data):
    print(callback_data)
    try:
        amount = int(message.text)
    except ValueError:
        if message.text == "–ù–∞–∑–∞–¥":
            bot.send_message(message.chat.id, '–í–µ—Ä–Ω–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            main_menu_func(message)
            return
        print('ValueError',message.text)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        people_button = types.KeyboardButton('–ù–∞–∑–∞–¥')
        markup.add(people_button)
        sent = bot.send_message(message.chat.id, 'üôà –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.üôâ', reply_markup=markup)
        bot.register_next_step_handler(sent, process_amount_callback, callback_data)
        return

    parts = callback_data.split(':')
    sender = int(parts[1])
    recipient = int(parts[2])
    print(sender, recipient)
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    recipient_doc = users.find_one({'chat_id': int(recipient)})
    keyboard = types.InlineKeyboardMarkup()
    callback_button = types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                                                 callback_data=f"transaction_with_sum:{sender}:{recipient}:{amount}")
    keyboard.add(callback_button)
    bot.send_message(chat_id=message.chat.id, text=f"–í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –∫–ª–∏–µ–Ω—Ç—É:\n{recipient_doc['name']} –∏–∑ {recipient_doc['group']}-–≥–æ –æ—Ç—Ä—è–¥–∞.\n–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {amount} –ë—É–±–ª–µ–π\n", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('transaction_with_sum:'))
def process_transaction(call):
    # –†–∞–∑–¥–µ–ª—è–µ–º callback_data –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ
    users = db['users']
    parts = str(call.data).split(':')
    print(parts)
    sender = int(parts[1])
    recipient = int(parts[2])
    amount = int(parts[3])
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    sender_doc = users.find_one({'chat_id': sender})
    recipient_doc = users.find_one({'chat_id': recipient})
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã
    if not sender_doc:
        return '–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
    if not recipient_doc:
        return '–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    print(sender, recipient, amount)
    if sender_doc['balance'] < amount:
        sent = bot.send_message(sender_doc['chat_id'], '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ü•≤')
        return '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ '


    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users.update_one({'chat_id': sender}, {'$inc': {'balance': -amount}})
    users.update_one({'chat_id': recipient}, {'$inc': {'balance': amount}})

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    transaction = {
        'sender': sender,
        'recipient': recipient,
        'amount': amount,
        'date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    transactions.insert_one(transaction)
    recipient_doc = users.find_one({'chat_id': recipient})
    try:
        bot.send_message(recipient_doc['chat_id'], f" üí∏ –í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥ {amount} –ë—É–±–ª–µ–π –æ—Ç {sender_doc['name']} –∏–∑ {sender_doc['group']}-–≥–æ –æ—Ç—Ä—è–¥–∞\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {recipient_doc['balance']} –ë—É–±–ª–µ–π")
    except:
        return
    bot.send_message(sender_doc['chat_id'], '‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞')
    return '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞'

# --------------------------------------------–ü–ï–†–ï–í–û–î –û–¢ –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò –ö–õ–ò–ï–ù–¢–£-----------------------------------------------------------------------------------------------------------

@bot.callback_query_handler(func=lambda call: call.data.startswith('orgfiz:'))
def start_org(call):
    groups = collection.distinct("group")
    org_id = call.data.split(":")[1]
    markup = telebot.types.InlineKeyboardMarkup()
    for group in groups:
        markup.add(telebot.types.InlineKeyboardButton(text=group, callback_data=f"group_org:{group}:{org_id}"))
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Ä—è–¥:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.split(":")[0] == "group_org")
def handle_group_selection_org(call):
    # –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ callback_data
    group = call.data.split(":")[1]
    org_id = call.data.split(":")[2]
    # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö admin != 1
    users = collection.find({"group": group, "admin": {"$ne": 1}})
    # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    markup = telebot.types.InlineKeyboardMarkup()
    for user in users:
        markup.add(telebot.types.InlineKeyboardButton(text=user["name"], callback_data=f"user_org:{org_id}:{user['chat_id']}"))
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {group} –æ—Ç—Ä—è–¥.\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=markup)

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.callback_query_handler(func=lambda call: call.data.split(":")[0] == "user_org")
def handle_user_selection_org(call):
    # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
    org_id = call.data.split(":")[1]
    user_id = call.data.split(":")[2]
    # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = collection.find_one({"chat_id": int(user_id)})
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if user is not None:
        keyboard = types.InlineKeyboardMarkup()
        callback_button = types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"transaction_org:{org_id}:{user_id}")
        keyboard.add(callback_button)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f"–í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –∫–ª–∏–µ–Ω—Ç—É —Å–æ —Å—á–µ—Ç–∞ –∫–æ–º–ø–∞–Ω–∏–∏:\n–ò–º—è: {user['name']}\n–û—Ç—Ä—è–¥: {user['group']}\n", reply_markup=keyboard)
    else:
        bot.answer_callback_query(callback_query_id=call.id, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")



@bot.callback_query_handler(func=lambda call: call.data.startswith('transaction_org'))
def process_transaction_callback_org(call):
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    amount_message = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:')
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ 'waiting_for_amount'
    bot.register_next_step_handler(amount_message, process_amount_callback_org, call.data)
def process_amount_callback_org(message, callback_data):
    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        amount = int(message.text)
    except ValueError:
        if message.text == "–ù–∞–∑–∞–¥":
            bot.send_message(message.chat.id, '–í–µ—Ä–Ω–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            main_menu_func(message)
            return
        print('ValueError', message.text)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        people_button = types.KeyboardButton('–ù–∞–∑–∞–¥')
        markup.add(people_button)
        sent = bot.send_message(chat_id, 'üóø –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', reply_markup=markup)
        bot.register_next_step_handler(sent, process_amount_callback_org, callback_data)
        return

    parts = callback_data.split(':')
    sender = parts[1]
    recipient = int(parts[2])
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    recipient_doc = users.find_one({'chat_id': recipient})
    keyboard = types.InlineKeyboardMarkup()
    callback_button = types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                                                 callback_data=f"transaction_sum_org:{sender}:{recipient}:{amount}")
    keyboard.add(callback_button)
    bot.send_message(chat_id=message.chat.id, text=f"–í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –∫–ª–∏–µ–Ω—Ç—É —Å–æ —Å—á–µ—Ç–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:\n{recipient_doc['name']} –∏–∑ {recipient_doc['group']}-–≥–æ –æ—Ç—Ä—è–¥–∞.\n–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {amount} –ë—É–±–ª–µ–π\n", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('transaction_sum_org:'))
def process_transaction_org(call):
    # –†–∞–∑–¥–µ–ª—è–µ–º callback_data –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ
    org = db['organizations']
    parts = str(call.data).split(':')
    print(parts)
    sender = parts[1]
    recipient = int(parts[2])
    amount = int(parts[3])

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    sender_doc = org.find_one({'id_organization': sender})
    recipient_doc = users.find_one({'chat_id': recipient})
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã
    if not sender_doc:
        return '–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
    if not recipient_doc:
        return '–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    if sender_doc['balance'] < amount:
        sent = bot.send_message(sender_doc['admin_chat_id'], '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')
        main_menu_func(message)
        return '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤'
    tax = int(amount*0.13)
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    org.update_one({'id_organization': sender}, {'$inc': {'balance': -(amount+tax)}})
    org.update_one({'id_organization': "org0"}, {'$inc': {'balance': tax}})
    users.update_one({'chat_id': recipient}, {'$inc': {'balance': amount}})
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    transaction = {
        'sender': sender,
        'recipient': recipient,
        'amount': amount,
        'date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    transactions.insert_one(transaction)
    recipient_doc = users.find_one({'chat_id': recipient})
    bot.send_message(sender_doc['admin_chat_id'], f'‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞, —É–¥–µ—Ä–∂–∞–Ω –Ω–∞–ª–æ–≥ {tax} –ë—É–±–ª–µ–π')
    try:
        bot.send_message(recipient_doc['chat_id'], f"üí∏ –í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥ {amount} –ë—É–±–ª–µ–π –æ—Ç {sender_doc['name']}\n–í–∞—à –±–∞–ª–∞–Ω—Å: {recipient_doc['balance']}")
    except:
        return
    return '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞'


# -------------------------------–¢–†–ê–ù–ó–ê–ö–¶–ò–ò –û–¢ –ö–õ–ò–ï–ù–¢–ê –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò----------------------------------------------------------------

@bot.callback_query_handler(func=lambda call: call.data.startswith('fizorg'))
def process_transaction_callback_org(call):
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    amount_message = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:')
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ 'waiting_for_amount'
    bot.register_next_step_handler(amount_message, process_amount_callback_org_p, call.data)
def process_amount_callback_org_p(message, callback_data):
    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        amount = int(message.text)
    except ValueError:
        if message.text == "–ù–∞–∑–∞–¥":
            bot.send_message(message.chat.id, '–í–µ—Ä–Ω–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            main_menu_func(message)
            return
        print('ValueError', message.text)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        people_button = types.KeyboardButton('–ù–∞–∑–∞–¥')
        markup.add(people_button)
        sent = bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', reply_markup=markup)
        bot.register_next_step_handler(sent, process_amount_callback_org_p, callback_data)
        return
    orga = db['organizations']
    parts = callback_data.split(':')
    sender = message.chat.id
    recipient = parts[1]
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    recipient_doc = orga.find_one({'id_organization': recipient})
    org_id = recipient_doc['id_organization']
    sender_doc = collection.find_one({'chat_id':message.chat.id})

    keyboard = types.InlineKeyboardMarkup()
    callback_button = types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"t:{sender}:{org_id}:{amount}")
    keyboard.add(callback_button)
    bot.send_message(chat_id=message.chat.id, text=f"–í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {recipient_doc['name']}\n–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {amount} –±—É–±\n", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('t:'))
def process_transaction_org_r(call):
    # –†–∞–∑–¥–µ–ª—è–µ–º callback_data –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ
    org = db['organizations']
    parts = str(call.data).split(':')
    print(parts)
    sender = int(parts[1])
    recipient = parts[2]
    amount = int(parts[3])

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    sender_doc = users.find_one({'chat_id': sender})
    recipient_doc = org.find_one({'id_organization': recipient})
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã
    if not sender_doc:
        return '–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
    if not recipient_doc:
        return '–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    if sender_doc['balance'] < amount:
        bot.send_message(sender, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')
        return '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤'
        # bot.register_next_step_handler(sent, process_transaction_org, call)
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    tax = int(0.2*amount)
    users.update_one({'chat_id': sender}, {'$inc': {'balance': -amount}})
    org.update_one({'id_organization': recipient}, {'$inc': {'balance': (amount - tax)}})
    org.update_one({'id_organization': "org0"}, {'$inc': {'balance': (amount - tax)}})

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    transaction = {
        'sender': sender,
        'recipient': recipient,
        'amount': amount,
        'date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    transactions.insert_one(transaction)
    recipient_doc = org.find_one({'id_organization': recipient})
    try:
        bot.send_message(recipient_doc['admin_chat_id'], f"üí∏ –í –∫–æ–º–ø–∞–Ω–∏—é –ø–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥ {amount} –±—É–± –æ—Ç {sender_doc['name']} –∏–∑ {sender_doc['group']}-–≥–æ –æ—Ç—Ä—è–¥–∞, —É–¥–µ—Ä–∂–∞–Ω –Ω–∞–ª–æ–≥ {tax} –ë—É–±–ª–µ–π\nüí∞ –°—á–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏: {recipient_doc['balance']}")
    except:
        return
    bot.send_message(sender_doc['chat_id'], '‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞')
    return '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞'


#-------------------------------------------–¢–†–ê–ù–ó–ê–ö–¶–ò–ò –û–¢ –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò-----------------------------------------------------------p


@bot.callback_query_handler(func=lambda call: call.data.startswith('start_orgorg:'))
def orgorg(call):
    org = db['organizations']
    org_id = call.data.split(":")[1]
    groups = org.distinct("name")

    markup = telebot.types.InlineKeyboardMarkup()

    for group in groups:
        group_doc = org.find_one({'name':group})
        markup.add(telebot.types.InlineKeyboardButton(text=group, callback_data=f"orgorg:{org_id}:{group_doc['id_organization']}"))
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('orgorg:'))
def process_transaction_callback_orgorg(call):
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    amount_message = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:')
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ 'waiting_for_amount'
    bot.register_next_step_handler(amount_message, process_amount_callback_orgorg, call.data)

def process_amount_callback_orgorg(message, callback_data):
    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        amount = int(message.text)
    except ValueError:
        if message.text == "–ù–∞–∑–∞–¥":
            bot.send_message(message.chat.id, '–í–µ—Ä–Ω–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            main_menu_func(message)
            return
        print('ValueError', message.text)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        people_button = types.KeyboardButton('–ù–∞–∑–∞–¥')
        markup.add(people_button)
        sent = bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', reply_markup=markup)
        bot.register_next_step_handler(sent, process_amount_callback_orgorg, callback_data)
        return
    org = db['organizations']
    parts = callback_data.split(':')
    sender = parts[1]
    recipient = parts[2]
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    sender_doc = org.find_one({'id_organization': sender})
    recipient_doc = org.find_one({'id_organization': recipient})
    recipient = recipient_doc['id_organization']

    keyboard = types.InlineKeyboardMarkup()
    callback_button = types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",callback_data=f"tra_orgorg:{sender}:{recipient}:{amount}")
    keyboard.add(callback_button)
    bot.send_message(chat_id=message.chat.id, text=f"–í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {recipient_doc['name']} —Å–æ —Å—á–µ—Ç–∞ —Å–≤–æ–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏\n–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {amount} –ë—É–±–ª–µ–π\n", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith('tra_orgorg:'))
def process_transaction_orgorg(call):
    # –†–∞–∑–¥–µ–ª—è–µ–º callback_data –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ
    org = db['organizations']
    parts = call.data.split(':')
    print(parts)
    sender = parts[1]
    recipient = parts[2]
    amount = int(parts[3])
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    sender_doc = org.find_one({'id_organization': sender})
    recipient_doc = org.find_one({'id_organization': recipient})
    print(sender_doc)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã
    if not sender_doc:
        return '–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
    if not recipient_doc:
        return '–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    if sender_doc['balance'] < amount:
        sent = bot.send_message(sender_doc['admin_chat_id'], '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')
        return '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤'
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    re_be = recipient_doc['balance']
    se_be = sender_doc['balance']

    org.update_one({'id_organization': sender}, {'$inc': {'balance': -amount}})
    org.update_one({'id_organization': recipient}, {'$inc': {'balance': amount}})

    sender_doc = org.find_one({'id_organization': sender})
    recipient_doc = org.find_one({'id_organization': recipient})

    se_af = sender_doc['balance']
    re_af = recipient_doc['balance']

    print(re_be, se_be, re_af, se_af)

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    transaction = {
        'sender': sender,
        'recipient': recipient,
        'amount': amount,
        'date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    transactions.insert_one(transaction)
    try:
        bot.send_message(recipient_doc['admin_chat_id'], f"üí∏ –í –∫–æ–º–ø–∞–Ω–∏—é –ø–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥ {amount} –ë—É–±–ª–µ–π –æ—Ç \"{sender_doc['name']}\"\nüí∞ –°—á–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏: {recipient_doc['balance']}")
    except:
        return
    bot.send_message(sender_doc['admin_chat_id'], '‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞')
    return '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞'



#--------------------------------–ó–ê–ü–†–û–° –î–ï–ù–ï–ì –£ –ü–ï–ó–î–Æ–ö–û–í-----------------------------


@bot.callback_query_handler(func=lambda call: call.data.startswith('query_money:'))
def start_q(call):
    groups = collection.distinct("group")
    org_id = call.data.split(":")[1]
    markup = telebot.types.InlineKeyboardMarkup()
    for group in groups:
        markup.add(telebot.types.InlineKeyboardButton(text=group, callback_data=f"group_q:{group}:{org_id}"))
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Ä—è–¥:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.split(":")[0] == "group_q")
def handle_group_selection_q(call):
    # –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ callback_data
    group = call.data.split(":")[1]
    org_id = call.data.split(":")[2]
    # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö admin != 1
    users = collection.find({"group": group, "admin": {"$ne": 1}})
    # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    markup = telebot.types.InlineKeyboardMarkup()
    for user in users:
        markup.add(telebot.types.InlineKeyboardButton(text=user["name"], callback_data=f"user_q:{org_id}:{user['chat_id']}"))
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {group} –æ—Ç—Ä—è–¥.\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=markup)

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.callback_query_handler(func=lambda call: call.data.split(":")[0] == "user_q")
def handle_user_selection_q(call):
    # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
    org_id = call.data.split(":")[1]
    user_id = call.data.split(":")[2]
    # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = collection.find_one({"chat_id": int(user_id)})
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if user is not None:
        keyboard = types.InlineKeyboardMarkup()
        callback_button = types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"transaction_q:{org_id}:{user_id}")
        keyboard.add(callback_button)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f"–í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–µ–Ω—å–≥–∏ —É \n–ò–º—è: {user['name']}\n–û—Ç—Ä—è–¥: {user['group']}\n", reply_markup=keyboard)
    else:
        bot.answer_callback_query(callback_query_id=call.id, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")



@bot.callback_query_handler(func=lambda call: call.data.startswith('transaction_q'))
def process_transaction_callback_q(call):
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    amount_message = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:')
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ 'waiting_for_amount'
    bot.register_next_step_handler(amount_message, process_amount_callback_q, call.data)
def process_amount_callback_q(message, callback_data):
    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        amount = int(message.text)
    except ValueError:
        if message.text == "–ù–∞–∑–∞–¥":
            bot.send_message(message.chat.id, '–í–µ—Ä–Ω–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            main_menu_func(message)
            return
        print('ValueError', message.text)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        people_button = types.KeyboardButton('–ù–∞–∑–∞–¥')
        markup.add(people_button)
        sent = bot.send_message(chat_id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', reply_markup=markup)
        bot.register_next_step_handler(sent, process_amount_callback_q, callback_data)
        return

    parts = callback_data.split(':')
    sender = parts[1]
    recipient = int(parts[2])
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    recipient_doc = users.find_one({'chat_id': recipient})
    keyboard = types.InlineKeyboardMarkup()
    callback_button = types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                                                 callback_data=f"transaction_sum_q:{sender}:{recipient}:{amount}")
    keyboard.add(callback_button)
    bot.send_message(chat_id=message.chat.id, text=f"–í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –±—É–±–ª–∏ —É \n{recipient_doc['name']} –∏–∑ {recipient_doc['group']}-–≥–æ –æ—Ç—Ä—è–¥–∞.\n–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {amount} –ë—É–±–ª–µ–π\n", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('transaction_sum_q:'))
def process_transaction_q(call):
    # –†–∞–∑–¥–µ–ª—è–µ–º callback_data –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ
    org = db['organizations']
    parts = str(call.data).split(':')
    print(parts)
    sender = parts[1]
    recipient = int(parts[2])
    amount = int(parts[3])

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    sender_doc = org.find_one({'id_organization': sender})
    recipient_doc = users.find_one({'chat_id': recipient})
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã
    if not sender_doc:
        return '–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
    if not recipient_doc:
        return '–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    if recipient_doc['balance'] < amount:
        sent = bot.send_message(sender_doc['admin_chat_id'], '–£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')
        main_menu_func(call.message)
        return '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤'
    tax = int(amount*0.13)
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    org.update_one({'id_organization': sender}, {'$inc': {'balance': (amount-tax)}})
    org.update_one({'id_organization': "org0"}, {'$inc': {'balance': tax}})
    users.update_one({'chat_id': recipient}, {'$inc': {'balance': -amount}})
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    transaction = {
        'sender': recipient,
        'recipient': sender,
        'amount': amount,
        'date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    transactions.insert_one(transaction)
    recipient_doc = users.find_one({'chat_id': recipient})
    sender_doc = org.find_one({'id_organization': sender})
    bot.send_message(sender_doc['admin_chat_id'],
                     f"{amount} –ë—É–±–ª–µ–π –æ—Ç {recipient_doc['name']} –ø–æ—Å—Ç—É–ø–∏–ª–æ –Ω–∞\n–í–∞—à –±–∞–ª–∞–Ω—Å: {sender_doc['balance']} –±—É–±.\n–ë–∞–ª–∞–Ω—Å {recipient_doc['name']} = {recipient_doc['balance']} –±—É–±.\n–ù–∞–ª–æ–≥ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {tax} –±—É–±.")
    try:
        bot.send_message(recipient_doc['chat_id'], f"üèõ –û–ø–ª–∞—Ç–∞ {amount} –ë—É–±–ª–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ \"{sender_doc['name']}\"")
    except:
        return
    return '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞'

